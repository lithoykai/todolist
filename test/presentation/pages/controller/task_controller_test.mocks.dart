// Mocks generated by Mockito 5.4.4 from annotations
// in todolist/test/presentation/pages/controller/task_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todolist/data/models/task_model.dart' as _i7;
import 'package:todolist/domain/entities/task_entity.dart' as _i6;
import 'package:todolist/domain/usecase/task/create_task.dart' as _i3;
import 'package:todolist/domain/usecase/task/delete_task.dart' as _i10;
import 'package:todolist/domain/usecase/task/get_tasks.dart' as _i8;
import 'package:todolist/domain/usecase/task/update_task.dart' as _i9;
import 'package:todolist/infra/failure/failure.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CreateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTaskUseCase extends _i1.Mock implements _i3.CreateTaskUseCase {
  MockCreateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>> call(
          _i7.TaskModel? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.TaskEntity>(
          this,
          Invocation.method(
            #call,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>);
}

/// A class which mocks [GetTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTasksUseCase extends _i1.Mock implements _i8.GetTasksUseCase {
  MockGetTasksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>> getTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasks,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.TaskEntity>>(
          this,
          Invocation.method(
            #getTasks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TaskEntity>>>);
}

/// A class which mocks [UpdateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTaskUseCase extends _i1.Mock implements _i9.UpdateTaskUseCase {
  MockUpdateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>> call(
          _i6.TaskEntity? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>.value(
            _FakeEither_0<_i5.Failure, _i6.TaskEntity>(
          this,
          Invocation.method(
            #call,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TaskEntity>>);
}

/// A class which mocks [DeleteTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTaskUseCase extends _i1.Mock implements _i10.DeleteTaskUseCase {
  MockDeleteTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> call(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
